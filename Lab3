#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Define the structure for a binary tree node
typedef struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

// Function to create a new tree node
TreeNode* createNode(int value) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    if (newNode == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    
    newNode->val = value;
    newNode->left = NULL;
    newNode->right = NULL;
    
    return newNode;
}

// Function to perform recursive preorder traversal and store results in array
void preorderHelper(TreeNode* root, int* result, int* index) {
    if (root == NULL) {
        return;
    }
    
    // Visit the root (add to result array)
    result[(*index)++] = root->val;
    
    // Recursively traverse left subtree
    preorderHelper(root->left, result, index);
    
    // Recursively traverse right subtree
    preorderHelper(root->right, result, index);
}

// Function to count the number of nodes in a tree
int countNodes(TreeNode* root) {
    if (root == NULL) {
        return 0;
    }
    
    return 1 + countNodes(root->left) + countNodes(root->right);
}

// Function to perform preorder traversal and return array of values
int* preorderTraversal(TreeNode* root, int* returnSize) {
    // Count the number of nodes in the tree to determine array size
    *returnSize = countNodes(root);
    
    // Handle empty tree case
    if (*returnSize == 0) {
        return NULL;
    }
    
    // Allocate memory for the result array
    int* result = (int*)malloc(*returnSize * sizeof(int));
    if (result == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    
    // Perform preorder traversal
    int index = 0;
    preorderHelper(root, result, &index);
    
    return result;
}

// Function to free the memory allocated for the tree
void freeTree(TreeNode* root) {
    if (root == NULL) {
        return;
    }
    
    // Post-order deletion to free all nodes
    freeTree(root->left);
    freeTree(root->right);
    free(root);
}

// Function to print array
void printArray(int* arr, int size) {
    printf("[");
    for (int i = 0; i < size; i++) {
        printf("%d", arr[i]);
        if (i < size - 1) {
            printf(", ");
        }
    }
    printf("]\n");
}

// Function to build a tree from an array representation
// where -101 represents NULL (since constraints say -100 <= Node.val <= 100)
TreeNode* buildTree(int* arr, int size, int index) {
    if (index >= size || arr[index] == -101) {
        return NULL;
    }
    
    TreeNode* root = createNode(arr[index]);
    root->left = buildTree(arr, size, 2 * index + 1);
    root->right = buildTree(arr, size, 2 * index + 2);
    
    return root;
}

// Main function with test cases
int main() {
    // Test cases
    printf("Test Case 1: [1,null,2,3]\n");
    TreeNode* root1 = createNode(1);
    root1->right = createNode(2);
    root1->right->left = createNode(3);
    
    int returnSize1 = 0;
    int* result1 = preorderTraversal(root1, &returnSize1);
    printf("Expected Output: [1, 2, 3]\n");
    printf("Actual Output: ");
    printArray(result1, returnSize1);
    free(result1);
    freeTree(root1);
    
    printf("\nTest Case 2: [1,2,3,4,5,null,8,null,null,6,7,9]\n");
    TreeNode* root2 = createNode(1);
    
    root2->left = createNode(2);
    root2->right = createNode(3);
    
    root2->left->left = createNode(4);
    root2->left->right = createNode(5);
    
    root2->right->right = createNode(8);
    
    root2->left->right->left = createNode(6);
    root2->left->right->right = createNode(7);
    
    root2->right->right->left = createNode(9);
    
    int returnSize2 = 0;
    int* result2 = preorderTraversal(root2, &returnSize2);
    printf("Expected Output: [1, 2, 4, 5, 6, 7, 3, 8, 9]\n");
    printf("Actual Output: ");
    printArray(result2, returnSize2);
    free(result2);
    freeTree(root2);
    
    printf("\nTest Case 3: []\n");
    TreeNode* root3 = NULL;
    int returnSize3 = 0;
    int* result3 = preorderTraversal(root3, &returnSize3);
    printf("Expected Output: []\n");
    printf("Actual Output: ");
    printArray(result3, returnSize3);
    if (result3 != NULL) {
        free(result3);
    }
    
    printf("\nTest Case 4: [1]\n");
    TreeNode* root4 = createNode(1);
    int returnSize4 = 0;
    int* result4 = preorderTraversal(root4, &returnSize4);
    printf("Expected Output: [1]\n");
    printf("Actual Output: ");
    printArray(result4, returnSize4);
    free(result4);
    freeTree(root4);
    
    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Define the structure for a binary tree node
typedef struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

// Function to create a new tree ngode
TreeNode* createNode(int value) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    if (newNode == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    
    newNode->val = value;
    newNode->left = NULL;
    newNode->right = NULL;
    
    return newNode;
}

// Function to perform recursive inorder traversal and store results in array
void inorderHelper(TreeNode* root, int* result, int* index) {
    if (root == NULL) {
        return;
    }
    
    // First recursively traverse left subtree
    inorderHelper(root->left, result, index);
    
    // Then visit the root (add to result array)
    result[(*index)++] = root->val;
    
    // Finally recursively traverse right subtree
    inorderHelper(root->right, result, index);
}

// Function to count the number of nodes in a tree
int countNodes(TreeNode* root) {
    if (root == NULL) {
        return 0;
    }
    
    return 1 + countNodes(root->left) + countNodes(root->right);
}

// Function to perform inorder traversal and return array of values
int* inorderTraversal(TreeNode* root, int* returnSize) {
    // Count the number of nodes in the tree to determine array size
    *returnSize = countNodes(root);
    
    // Handle empty tree case
    if (*returnSize == 0) {
        return NULL;
    }
    
    // Allocate memory for the result array
    int* result = (int*)malloc(*returnSize * sizeof(int));
    if (result == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    
    // Perform inorder traversal
    int index = 0;
    inorderHelper(root, result, &index);
    
    return result;
}

// Function to free the memory allocated for the tree
void freeTree(TreeNode* root) {
    if (root == NULL) {
        return;
    }
    
    // Post-order deletion to free all nodes
    freeTree(root->left);
    freeTree(root->right);
    free(root);
}

// Function to print array
void printArray(int* arr, int size) {
    printf("[");
    for (int i = 0; i < size; i++) {
        printf("%d", arr[i]);
        if (i < size - 1) {
            printf(", ");
        }
    }
    printf("]\n");
}

// Function to build a tree from an array representation
// where -101 represents NULL (since constraints say -100 <= Node.val <= 100)
TreeNode* buildTree(int* arr, int size, int index) {
    if (index >= size || arr[index] == -101) {
        return NULL;
    }
    
    TreeNode* root = createNode(arr[index]);
    root->left = buildTree(arr, size, 2 * index + 1);
    root->right = buildTree(arr, size, 2 * index + 2);
    
    return root;
}

// Main function with test cases
int main() {
    // Test cases
    printf("Test Case 1: [1,null,2,3]\n");
    TreeNode* root1 = createNode(1);
    root1->right = createNode(2);
    root1->right->left = createNode(3);
    
    int returnSize1 = 0;
    int* result1 = inorderTraversal(root1, &returnSize1);
    printf("Expected Output: [1, 3, 2]\n");
    printf("Actual Output: ");
    printArray(result1, returnSize1);
    free(result1);
    freeTree(root1);
    
    printf("\nTest Case 2: [1,2,3,4,5,null,8,null,null,6,7,9]\n");
    TreeNode* root2 = createNode(1);
    
    root2->left = createNode(2);
    root2->right = createNode(3);
    
    root2->left->left = createNode(4);
    root2->left->right = createNode(5);
    
    root2->right->right = createNode(8);
    
    root2->left->right->left = createNode(6);
    root2->left->right->right = createNode(7);
    
    root2->right->right->left = createNode(9);
    
    int returnSize2 = 0;
    int* result2 = inorderTraversal(root2, &returnSize2);
    printf("Expected Output: [4, 2, 6, 5, 7, 1, 3, 9, 8]\n");
    printf("Actual Output: ");
    printArray(result2, returnSize2);
    free(result2);
    freeTree(root2);
    
    printf("\nTest Case 3: []\n");
    TreeNode* root3 = NULL;
    int returnSize3 = 0;
    int* result3 = inorderTraversal(root3, &returnSize3);
    printf("Expected Output: []\n");
    printf("Actual Output: ");
    printArray(result3, returnSize3);
    if (result3 != NULL) {
        free(result3);
    }
    
    printf("\nTest Case 4: [1]\n");
    TreeNode* root4 = createNode(1);
    int returnSize4 = 0;
    int* result4 = inorderTraversal(root4, &returnSize4);
    printf("Expected Output: [1]\n");
    printf("Actual Output: ");
    printArray(result4, returnSize4);
    free(result4);
    freeTree(root4);
    
    return 0;
}
